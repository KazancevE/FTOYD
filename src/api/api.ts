/* tslint:disable */
/* eslint-disable */
/**
 * Front Test API
 * Тестовое задание для Frontend разработчика
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Fetch200Response
 */
export interface Fetch200Response {
    /**
     * Indicated whether the response is successful.
     * @type {boolean}
     * @memberof Fetch200Response
     */
    'ok': boolean;
    /**
     * 
     * @type {Fetch200ResponseAllOfData}
     * @memberof Fetch200Response
     */
    'data': Fetch200ResponseAllOfData;
}
/**
 * 
 * @export
 * @interface Fetch200ResponseAllOfData
 */
export interface Fetch200ResponseAllOfData {
    /**
     * 
     * @type {Array<Match>}
     * @memberof Fetch200ResponseAllOfData
     */
    'matches': Array<Match>;
}
/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * Время проведения матча
     * @type {string}
     * @memberof Match
     */
    'time': string;
    /**
     * Название матча
     * @type {string}
     * @memberof Match
     */
    'title': string;
    /**
     * 
     * @type {Team}
     * @memberof Match
     */
    'homeTeam': Team;
    /**
     * 
     * @type {Team}
     * @memberof Match
     */
    'awayTeam': Team;
    /**
     * Счет домашней команды
     * @type {number}
     * @memberof Match
     */
    'homeScore': number;
    /**
     * Счет гостевой команды
     * @type {number}
     * @memberof Match
     */
    'awayScore': number;
    /**
     * 
     * @type {MatchStatus}
     * @memberof Match
     */
    'status': MatchStatus;
}


/**
 * Статус матча
 * @export
 * @enum {string}
 */

export const MatchStatus = {
    Scheduled: 'Scheduled',
    Ongoing: 'Ongoing',
    Finished: 'Finished'
} as const;

export type MatchStatus = typeof MatchStatus[keyof typeof MatchStatus];


/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * Имя игрока
     * @type {string}
     * @memberof Player
     */
    'username': string;
    /**
     * Количество убийств
     * @type {number}
     * @memberof Player
     */
    'kills': number;
}
/**
 * 
 * @export
 * @interface SuccessfulResponse
 */
export interface SuccessfulResponse {
    /**
     * Indicated whether the response is successful.
     * @type {boolean}
     * @memberof SuccessfulResponse
     */
    'ok': boolean;
    /**
     * If successful, response from api
     * @type {object}
     * @memberof SuccessfulResponse
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * Название команды
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * 
     * @type {Array<Player>}
     * @memberof Team
     */
    'players': Array<Player>;
    /**
     * Количество очков
     * @type {number}
     * @memberof Team
     */
    'points': number;
    /**
     * Место в турнирной таблице
     * @type {number}
     * @memberof Team
     */
    'place': number;
    /**
     * Количество убийств
     * @type {number}
     * @memberof Team
     */
    'total_kills': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Получить список матчей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fronttemp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Получить список матчей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetch(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fetch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetch(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.fetch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Получить список матчей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(options?: RawAxiosRequestConfig): AxiosPromise<Fetch200Response> {
            return localVarFp.fetch(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Получить список матчей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetch(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetch(options).then((request) => request(this.axios, this.basePath));
    }
}



